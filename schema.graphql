enum StatusEnum {
  PRESENT
  ABSENT
}

"Indicates what fields are available at the top level of a query operation."
type Query {
  login(email: String!, password: String!): String!
  doctor(id: ID): Doctor
  doctors(name: String, limit: Int): [Doctor!]!
  daySlots: [DaySlot!]!
  paginationDoctors(
    "Limits number of fetched items."
    first: Int!

    "The offset from which items are returned."
    page: Int
  ): DoctorPaginator!
}

type Mutation {
  upload(file: Upload!): String
  createDoctor(input: DoctorInput): Doctor!
  deleteDoctor(id: ID!): Doctor
}

scalar Upload

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime

"Account of a person who utilizes this application."
type DaySlot {
  id: ID!
  date(format: String): String
  status: StatusEnum!
  workHours: String
  absentReason: String
  replacement: Doctor
}

input CreateDaySlotHasMany {
  create: [DaySlotInput!]!
}

input DaySlotInput {
  date: DateTime
  status: StatusEnum!
}

type Doctor {
  id: ID!
  name: String!
  description(len: Int): String!
  photo: String!
  daySlots: [DaySlot!]!
}

input DoctorInput {
  name: String!
  description: String
  photo: String
  daySlots: CreateDaySlotHasMany
}

"Information about pagination using a fully featured paginator."
type PaginatorInfo {
  "Number of items in the current page."
  count: Int!

  "Index of the current page."
  currentPage: Int!

  "Index of the first item in the current page."
  firstItem: Int

  "Are there more pages after this one?"
  hasMorePages: Boolean!

  "Index of the last item in the current page."
  lastItem: Int

  "Index of the last available page."
  lastPage: Int!

  "Number of items per page."
  perPage: Int!

  "Number of total available items."
  total: Int!
}

"A paginated list of Doctor items."
type DoctorPaginator {
  "Pagination information about the list of items."
  paginatorInfo: PaginatorInfo!

  "A list of Doctor items."
  data: [Doctor!]!
}

"Directions for ordering a list of records."
enum SortOrder {
  "Sort records in ascending order."
  ASC

  "Sort records in descending order."
  DESC
}

"Aggregate functions when ordering by a relation without specifying a column."
enum OrderByRelationAggregateFunction {
  "Amount of items."
  COUNT
}

"Aggregate functions when ordering by a relation that may specify a column."
enum OrderByRelationWithColumnAggregateFunction {
  "Average."
  AVG

  "Minimum."
  MIN

  "Maximum."
  MAX

  "Sum."
  SUM

  "Amount of items."
  COUNT
}

"Allows ordering a list of records."
input OrderByClause {
  "The column that is used for ordering."
  column: String!

  "The direction that is used for ordering."
  order: SortOrder!
}

"Specify if you want to include or exclude trashed results from a query."
enum Trashed {
  "Only return trashed results."
  ONLY

  "Return both trashed and non-trashed results."
  WITH

  "Only return non-trashed results."
  WITHOUT
}

