#
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"Indicates what fields are available at the top level of a query operation."
type Query {
    login(email: String!, password: String!): AuthToken!
    #
    #    "Find a single user by an identifying attribute."
    #    user(
    #      "Search by primary key."
    #      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
    #
    #      "Search by email address."
    #      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    #    ): User @find
    #
    #    "List multiple users."
    users: [User!]! @paginate(defaultCount: 10)

    user(id: ID @eq): User! @find

    doctor (id: ID @eq): Doctor! @find

    paginationDoctors: [Doctor!]! @paginate @orderBy(column: "id", direction: DESC)

    doctors  (
        name: String @like(template: "%{}%")
        limit: Int @limit
    ): [Doctor!]! @all @orderBy(column: "id", direction: ASC)

    daySlots: [DaySlot!]!@all
}

type AuthToken {
    name: String!
    token: String!
    role: UserRoleEnum!
}

"Account of a person who utilizes this application."
type User {
    id: ID!
    name: String!
    email: String!
    role: UserRoleEnum!
}
type DaySlotTemplate{
    id: ID!
    dayNumber: Int!
    status: StatusEnum!
    workHours: String
}
type DaySlot {
    id: ID!
    date(format: String):String!  @dateFormat(default: "Y-m-d")
    status: StatusEnum!
    workHours: String
    absentReason: String
    replacement: Doctor
}

input CreateDaySlotHasMany {
    create: [DaySlotInput!]!
}

input UpdateReplacementHasMany {
    connect: ID
}

input DaySlotInput {
    id: ID
    date: Date!
    status: StatusEnum!
    workHours: String
    absentReason: String
    replacement: UpdateReplacementHasMany
}

input DaySlotTemplateInput {
    dayNumber: Int
    status: StatusEnum
    workHours: String
}



type Doctor {
    id: ID!
    name : String!
    description(len: Int) : String!
    photo : String! @url
    currentMonthDaySlots: [DaySlot!]!
    daySlots(month: Int!, year: Int!): [DaySlot!]!
    daySlotTemplates: [DaySlotTemplate!]!
}



input DoctorInput {
    name: String
    description: String
    photo : String,
    daySlots: CreateDaySlotHasMany
    daySlotTemplates: [DaySlotTemplateInput!] @overrideHasMany
}


input DoctorUpdateInput {
    id: ID!
    name: String
    description: String
    photo : String,
    daySlots: CreateDaySlotHasMany
    daySlotTemplates: [DaySlotTemplateInput!] @overrideHasMany
}

type Film {
    id: Int
    name: String
}
input UpdateDaySlotsInput {
    doctorId: ID!
    month: Int!
    year: Int!
    daySlots: [DaySlotInput!]
}

input CreateUserInput {
    name: String @rules(apply: ["required"])
    email: String @rules(apply: ["required", "unique:users,email"])
    role: UserRoleEnum
    password: String @rules(apply: ["required", "min:8"])
}

input UpdateUserInput  @validator {
    id: ID!
    name: String
    email: String
    role: UserRoleEnum
    password: String @rules(apply: [ "min:8"])
}


type Mutation {
    upload(file: Upload!): String
    createDoctor(input: DoctorInput @spread): Doctor! @create
    updateDoctor(input: DoctorUpdateInput @spread): Doctor! @update
    deleteDoctor(id: ID! @whereKey): Doctor @delete
    updateDaySlots(input: UpdateDaySlotsInput @spread): [DaySlot!]! @updateDaySlots

    createUser(input: CreateUserInput @spread): User @create
    updateUser(input: UpdateUserInput @spread): User @update
    deleteUser(id: ID! @whereKey): User @delete
}

#type Character
